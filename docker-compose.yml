name: ${COMPOSE_PROJECT_NAME}

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: order-management-frontend
    ports:
      - "${FRONTEND_PORT}:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=${NODE_ENV}
      - BACKEND_HOST=backend
      - BACKEND_PORT=${BACKEND_PORT}
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: order-management-backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./${UPLOAD_DIR}:/app/${UPLOAD_DIR}
    environment:
      - NODE_ENV=${NODE_ENV}
      - BACKEND_PORT=${BACKEND_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
    depends_on:
      - db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # 数据库服务
  db:
    image: mysql:8.0
    container_name: order-management-db
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - db-data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_DATABASE}
    networks:
      - app-network
    restart: unless-stopped

  # Redis服务（用于缓存和会话管理）
  redis:
    image: redis:6.2-alpine
    container_name: order-management-redis
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    restart: unless-stopped

# 定义数据卷
volumes:
  db-data:
  redis-data:

# 定义网络
networks:
  app-network:
    driver: bridge 